// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Synchronizer.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Execution.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Execution.Recipes
{
    using global::System;
    using global::System.Threading;
    using global::System.Threading.Tasks;

    /// <summary>
    /// An object that execute code while blocking the execution of all other code that uses the same synchronizer.
    /// </summary>
    /// <remarks>
    /// Adapted from: <a href="https://stackoverflow.com/a/50139704/356790" />.
    /// </remarks>
#if !OBeautifulCodeExecutionSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Execution.Recipes", "See package version number")]
    internal
#else
    public
#endif
    class Synchronizer : IDisposable
    {
        private readonly SemaphoreSlim semaphore = new SemaphoreSlim(1, 1);

        private bool isDisposed;

        /// <summary>
        /// Execute a synchronous method with no return value.
        /// </summary>
        /// <param name="method">The method to execute.</param>
        /// <exception cref="ArgumentNullException"><paramref name="method"/> is null.</exception>
        public void Run(
            Action method)
        {
            if (method == null)
            {
                throw new ArgumentNullException(nameof(method));
            }

            this.semaphore.Wait();

            try
            {
                method();
            }
            finally
            {
                this.semaphore.Release();
            }
        }

        /// <summary>
        /// Execute an asynchronous method with no return value.
        /// </summary>
        /// <param name="method">The method to execute.</param>
        /// <returns>
        /// A task.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="method"/> is null.</exception>
        public async Task RunAsync(
            Func<Task> method)
        {
            if (method == null)
            {
                throw new ArgumentNullException(nameof(method));
            }

            await this.semaphore.WaitAsync();

            try
            {
                await method();
            }
            finally
            {
                this.semaphore.Release();
            }
        }

        /// <summary>
        /// Executes a synchronous method that returns a value. 
        /// </summary>
        /// <typeparam name="T">The type of value.</typeparam>
        /// <param name="method">The method to execute.</param>
        /// <returns>
        /// The value returned by the method.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="method"/> is null.</exception>
        public T Run<T>(
            Func<T> method)
        {
            if (method == null)
            {
                throw new ArgumentNullException(nameof(method));
            }

            this.semaphore.Wait();

            try
            {
                var result = method();

                return result;
            }
            finally
            {
                this.semaphore.Release();
            }
        }

        /// <summary>
        /// Executes an asynchronous method that returns a value. 
        /// </summary>
        /// <typeparam name="T">The type of value.</typeparam>
        /// <param name="method">The method to execute.</param>
        /// <returns>
        /// A task of the value returned by the method.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="method"/> is null.</exception>
        public async Task<T> RunAsync<T>(
            Func<Task<T>> method)
        {
            if (method == null)
            {
                throw new ArgumentNullException(nameof(method));
            }

            await this.semaphore.WaitAsync();

            try
            {
                var result = await method();

                return result;
            }
            finally
            {
                this.semaphore.Release();
            }
        }

        /// <inheritdoc />
        public void Dispose()
        {
            this.Dispose(true);

            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Disposes the instance.
        /// </summary>
        /// <param name="disposing">Specifies whether this method is called directly or indirectly by user code.</param>
        protected virtual void Dispose(
            bool disposing)
        {
            if (this.isDisposed)
            {
                return;
            }

            if (disposing)
            {
                this.semaphore.Dispose();
            }

            this.isDisposed = true;
        }
    }
}