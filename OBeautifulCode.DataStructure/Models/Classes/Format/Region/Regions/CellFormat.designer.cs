// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.183.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.DataStructure
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Drawing;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Cloning.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class CellFormat : IModel<CellFormat>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="CellFormat"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(CellFormat left, CellFormat right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="CellFormat"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(CellFormat left, CellFormat right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(CellFormat other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.OuterBorders.IsEqualTo(other.OuterBorders)
                      && this.FontFormat.IsEqualTo(other.FontFormat)
                      && this.BackgroundColor.IsEqualTo(other.BackgroundColor)
                      && this.VerticalAlignment.IsEqualTo(other.VerticalAlignment)
                      && this.HorizontalAlignment.IsEqualTo(other.HorizontalAlignment)
                      && this.FontRotationAngle.IsEqualTo(other.FontRotationAngle)
                      && this.FillPattern.IsEqualTo(other.FillPattern)
                      && this.Options.IsEqualTo(other.Options);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as CellFormat);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.OuterBorders)
            .Hash(this.FontFormat)
            .Hash(this.BackgroundColor)
            .Hash(this.VerticalAlignment)
            .Hash(this.HorizontalAlignment)
            .Hash(this.FontRotationAngle)
            .Hash(this.FillPattern)
            .Hash(this.Options)
            .Value;

        /// <inheritdoc />
        public new CellFormat DeepClone() => (CellFormat)this.DeepCloneInternal();

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override RegionFormatBase DeepCloneWithOuterBorders(IReadOnlyList<OuterBorder> outerBorders)
        {
            var result = new CellFormat(
                                 outerBorders,
                                 this.FontFormat?.DeepClone(),
                                 this.BackgroundColor?.DeepClone(),
                                 this.VerticalAlignment?.DeepClone(),
                                 this.HorizontalAlignment?.DeepClone(),
                                 this.FontRotationAngle?.DeepClone(),
                                 this.FillPattern?.DeepClone(),
                                 this.Options?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FontFormat" />.
        /// </summary>
        /// <param name="fontFormat">The new <see cref="FontFormat" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="CellFormat" /> using the specified <paramref name="fontFormat" /> for <see cref="FontFormat" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public CellFormat DeepCloneWithFontFormat(FontFormat fontFormat)
        {
            var result = new CellFormat(
                                 this.OuterBorders?.DeepClone(),
                                 fontFormat,
                                 this.BackgroundColor?.DeepClone(),
                                 this.VerticalAlignment?.DeepClone(),
                                 this.HorizontalAlignment?.DeepClone(),
                                 this.FontRotationAngle?.DeepClone(),
                                 this.FillPattern?.DeepClone(),
                                 this.Options?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="BackgroundColor" />.
        /// </summary>
        /// <param name="backgroundColor">The new <see cref="BackgroundColor" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="CellFormat" /> using the specified <paramref name="backgroundColor" /> for <see cref="BackgroundColor" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public CellFormat DeepCloneWithBackgroundColor(Color? backgroundColor)
        {
            var result = new CellFormat(
                                 this.OuterBorders?.DeepClone(),
                                 this.FontFormat?.DeepClone(),
                                 backgroundColor,
                                 this.VerticalAlignment?.DeepClone(),
                                 this.HorizontalAlignment?.DeepClone(),
                                 this.FontRotationAngle?.DeepClone(),
                                 this.FillPattern?.DeepClone(),
                                 this.Options?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="VerticalAlignment" />.
        /// </summary>
        /// <param name="verticalAlignment">The new <see cref="VerticalAlignment" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="CellFormat" /> using the specified <paramref name="verticalAlignment" /> for <see cref="VerticalAlignment" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public CellFormat DeepCloneWithVerticalAlignment(VerticalAlignment? verticalAlignment)
        {
            var result = new CellFormat(
                                 this.OuterBorders?.DeepClone(),
                                 this.FontFormat?.DeepClone(),
                                 this.BackgroundColor?.DeepClone(),
                                 verticalAlignment,
                                 this.HorizontalAlignment?.DeepClone(),
                                 this.FontRotationAngle?.DeepClone(),
                                 this.FillPattern?.DeepClone(),
                                 this.Options?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="HorizontalAlignment" />.
        /// </summary>
        /// <param name="horizontalAlignment">The new <see cref="HorizontalAlignment" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="CellFormat" /> using the specified <paramref name="horizontalAlignment" /> for <see cref="HorizontalAlignment" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public CellFormat DeepCloneWithHorizontalAlignment(HorizontalAlignment? horizontalAlignment)
        {
            var result = new CellFormat(
                                 this.OuterBorders?.DeepClone(),
                                 this.FontFormat?.DeepClone(),
                                 this.BackgroundColor?.DeepClone(),
                                 this.VerticalAlignment?.DeepClone(),
                                 horizontalAlignment,
                                 this.FontRotationAngle?.DeepClone(),
                                 this.FillPattern?.DeepClone(),
                                 this.Options?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FontRotationAngle" />.
        /// </summary>
        /// <param name="fontRotationAngle">The new <see cref="FontRotationAngle" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="CellFormat" /> using the specified <paramref name="fontRotationAngle" /> for <see cref="FontRotationAngle" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public CellFormat DeepCloneWithFontRotationAngle(int? fontRotationAngle)
        {
            var result = new CellFormat(
                                 this.OuterBorders?.DeepClone(),
                                 this.FontFormat?.DeepClone(),
                                 this.BackgroundColor?.DeepClone(),
                                 this.VerticalAlignment?.DeepClone(),
                                 this.HorizontalAlignment?.DeepClone(),
                                 fontRotationAngle,
                                 this.FillPattern?.DeepClone(),
                                 this.Options?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FillPattern" />.
        /// </summary>
        /// <param name="fillPattern">The new <see cref="FillPattern" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="CellFormat" /> using the specified <paramref name="fillPattern" /> for <see cref="FillPattern" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public CellFormat DeepCloneWithFillPattern(FillPattern fillPattern)
        {
            var result = new CellFormat(
                                 this.OuterBorders?.DeepClone(),
                                 this.FontFormat?.DeepClone(),
                                 this.BackgroundColor?.DeepClone(),
                                 this.VerticalAlignment?.DeepClone(),
                                 this.HorizontalAlignment?.DeepClone(),
                                 this.FontRotationAngle?.DeepClone(),
                                 fillPattern,
                                 this.Options?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Options" />.
        /// </summary>
        /// <param name="options">The new <see cref="Options" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="CellFormat" /> using the specified <paramref name="options" /> for <see cref="Options" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public CellFormat DeepCloneWithOptions(CellFormatOptions? options)
        {
            var result = new CellFormat(
                                 this.OuterBorders?.DeepClone(),
                                 this.FontFormat?.DeepClone(),
                                 this.BackgroundColor?.DeepClone(),
                                 this.VerticalAlignment?.DeepClone(),
                                 this.HorizontalAlignment?.DeepClone(),
                                 this.FontRotationAngle?.DeepClone(),
                                 this.FillPattern?.DeepClone(),
                                 options);

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        protected override RegionFormatBase DeepCloneInternal()
        {
            var result = new CellFormat(
                                 this.OuterBorders?.DeepClone(),
                                 this.FontFormat?.DeepClone(),
                                 this.BackgroundColor?.DeepClone(),
                                 this.VerticalAlignment?.DeepClone(),
                                 this.HorizontalAlignment?.DeepClone(),
                                 this.FontRotationAngle?.DeepClone(),
                                 this.FillPattern?.DeepClone(),
                                 this.Options?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"OBeautifulCode.DataStructure.CellFormat: OuterBorders = {this.OuterBorders?.ToString() ?? "<null>"}, FontFormat = {this.FontFormat?.ToString() ?? "<null>"}, BackgroundColor = {this.BackgroundColor?.ToString() ?? "<null>"}, VerticalAlignment = {this.VerticalAlignment?.ToString() ?? "<null>"}, HorizontalAlignment = {this.HorizontalAlignment?.ToString() ?? "<null>"}, FontRotationAngle = {this.FontRotationAngle?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FillPattern = {this.FillPattern?.ToString() ?? "<null>"}, Options = {this.Options?.ToString() ?? "<null>"}.");

            return result;
        }
    }
}